// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/ricardo/GitHub/billing-mcp/internal/movements/domain/service.go
//
// Generated by this command:
//
//	mockgen -source=/Users/ricardo/GitHub/billing-mcp/internal/movements/domain/service.go -destination=/Users/ricardo/GitHub/billing-mcp/internal/movements/domain/service_mock.go -package=domain MovementRepository
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/ricardogrande-masmovil/billing-mcp/internal/movements/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMovementRepository is a mock of MovementRepository interface.
type MockMovementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovementRepositoryMockRecorder
	isgomock struct{}
}

// MockMovementRepositoryMockRecorder is the mock recorder for MockMovementRepository.
type MockMovementRepositoryMockRecorder struct {
	mock *MockMovementRepository
}

// NewMockMovementRepository creates a new mock instance.
func NewMockMovementRepository(ctrl *gomock.Controller) *MockMovementRepository {
	mock := &MockMovementRepository{ctrl: ctrl}
	mock.recorder = &MockMovementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovementRepository) EXPECT() *MockMovementRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovementRepository) Create(ctx context.Context, movement *model.Movement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, movement)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMovementRepositoryMockRecorder) Create(ctx, movement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovementRepository)(nil).Create), ctx, movement)
}

// Delete mocks base method.
func (m *MockMovementRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMovementRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovementRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockMovementRepository) GetByID(ctx context.Context, id uuid.UUID) (*model.Movement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Movement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMovementRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMovementRepository)(nil).GetByID), ctx, id)
}

// Search mocks base method.
func (m *MockMovementRepository) Search(ctx context.Context, criteria *model.SearchCriteria) ([]*model.Movement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, criteria)
	ret0, _ := ret[0].([]*model.Movement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockMovementRepositoryMockRecorder) Search(ctx, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMovementRepository)(nil).Search), ctx, criteria)
}

// UpdateStatus mocks base method.
func (m *MockMovementRepository) UpdateStatus(ctx context.Context, movement *model.Movement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, movement)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockMovementRepositoryMockRecorder) UpdateStatus(ctx, movement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMovementRepository)(nil).UpdateStatus), ctx, movement)
}
