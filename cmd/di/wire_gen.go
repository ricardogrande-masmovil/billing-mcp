// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"github.com/mark3labs/mcp-go/server"
	"github.com/ricardogrande-masmovil/billing-mcp/api"
	"github.com/ricardogrande-masmovil/billing-mcp/api/mcp"
	"github.com/ricardogrande-masmovil/billing-mcp/config"
	"github.com/ricardogrande-masmovil/billing-mcp/internal/invoices/domain"
	persistence2 "github.com/ricardogrande-masmovil/billing-mcp/internal/invoices/infrastructure/persistence"
	"github.com/ricardogrande-masmovil/billing-mcp/internal/invoices/infrastructure/persistence/sql"
	"github.com/ricardogrande-masmovil/billing-mcp/internal/invoices/ports"
	"github.com/ricardogrande-masmovil/billing-mcp/pkg/persistence"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeApp(configFile string) (*App, func(), error) {
	config, err := ProvideConfig(configFile)
	if err != nil {
		return nil, nil, err
	}
	logger := ProvideLogger(config)
	db, cleanup, err := ProvideDB(config, logger)
	if err != nil {
		return nil, nil, err
	}
	echo := ProvideEcho()
	mcpServer := ProvideMCPServer()
	healthController := ProvideHealthController()
	invoiceSqlClient := ProvideInvoiceSqlClient(db, config)
	invoiceSqlConverter := ProvideInvoiceSqlConverter()
	repository := ProvideInvoicePersistenceRepository(invoiceSqlClient, invoiceSqlConverter)
	service := ProvideInvoiceDomainService(repository)
	invoicesController := ProvideInvoicesController(service)
	mcpMCPServer := ProvideMCPServerAPI(healthController, invoicesController)
	app := &App{
		Config:             config,
		Logger:             logger,
		DB:                 db,
		Echo:               echo,
		MCPServer:          mcpServer,
		MCPServerAPI:       mcpMCPServer,
		HealthController:   healthController,
		InvoicesController: invoicesController,
	}
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// App holds the application's dependencies.
type App struct {
	Config             *config.Config
	Logger             zerolog.Logger
	DB                 *gorm.DB
	Echo               *echo.Echo
	MCPServer          *server.MCPServer
	MCPServerAPI       *mcp.MCPServer // Added field for the API specific MCP server
	HealthController   mcp.HealthController
	InvoicesController mcp.InvoicesController
}

// --- Core Providers ---
func ProvideConfig(filePath string) (*config.Config, error) {
	return config.LoadConfig(filePath)
}

func ProvideLogger(cfg *config.Config) zerolog.Logger {
	logLevel, err := zerolog.ParseLevel(cfg.LogLevel)
	if err != nil {
		log.Fatal().Err(err).Msg("failed to parse log level for DI")
	}
	return log.Logger.Level(logLevel)
}

func ProvideDB(cfg *config.Config, logger zerolog.Logger) (*gorm.DB, func(), error) {
	dsn := cfg.GetDSN()
	db, err := persistence.NewSqlClient(dsn)
	if err != nil {
		return nil, nil, err
	}
	cleanup := func() {
		sqlDB, dbErr := db.DB()
		if dbErr != nil {
			logger.Error().Err(dbErr).Msg("Failed to get underlying sql.DB for cleanup")
			return
		}
		if err := sqlDB.Close(); err != nil {
			logger.Error().Err(err).Msg("Failed to close database connection")
		} else {
			logger.Info().Msg("Database connection closed successfully.")
		}
	}
	return db, cleanup, nil
}

func ProvideEcho() *echo.Echo {
	return echo.New()
}

func ProvideMCPServer() *server.MCPServer {
	return server.NewMCPServer("billing-mcp", "0.0.1")
}

// Provider for the API specific MCPServer
func ProvideMCPServerAPI(healthController mcp.HealthController, invoicesController mcp.InvoicesController) *mcp.MCPServer {
	return mcp.NewMCPServer(healthController, invoicesController)
}

func ProvideHealthController() mcp.HealthController {
	return api.NewHealthController()
}

// --- Invoice Feature Providers ---
func ProvideInvoiceSqlClient(db *gorm.DB, cfg *config.Config) sql.InvoiceSqlClient {
	return sql.NewInvoiceSqlClient(db, cfg.Database.MaxRetries)
}

func ProvideInvoiceSqlConverter() sql.InvoiceSqlConverter {
	return sql.NewInvoiceSqlConverter()
}

func ProvideInvoicePersistenceRepository(client sql.InvoiceSqlClient, converter sql.InvoiceSqlConverter) persistence2.Repository {
	return persistence2.NewRepository(client, converter)
}

func ProvideInvoiceDomainService(repo domain.Repository) domain.Service {
	return domain.NewService(repo)
}

func ProvideInvoicePortsService(domainService domain.Service) ports.InvoiceService {
	return domainService
}

func ProvideInvoicesController(service ports.InvoiceService) mcp.InvoicesController {
	return ports.NewController(service)
}

// --- Provider Sets ---
var CoreSet = wire.NewSet(
	ProvideConfig,
	ProvideLogger,
	ProvideDB,
	ProvideEcho,
	ProvideMCPServer,
	ProvideMCPServerAPI,
	ProvideHealthController,
)

var InvoiceFeatureSet = wire.NewSet(
	ProvideInvoiceSqlClient,
	ProvideInvoiceSqlConverter,
	ProvideInvoicePersistenceRepository, wire.Bind(new(domain.Repository), new(persistence2.Repository)), ProvideInvoiceDomainService, wire.Bind(new(ports.InvoiceService), new(domain.Service)), ProvideInvoicesController,
)

var AppSet = wire.NewSet(
	CoreSet,
	InvoiceFeatureSet, wire.Struct(new(App), "*"),
)
